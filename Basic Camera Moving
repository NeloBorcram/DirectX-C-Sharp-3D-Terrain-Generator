using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using Microsoft.DirectX;
using Microsoft.DirectX.Direct3D;

namespace TerrainGeneratorTutorial0._1
{
    public partial class Form1 : Form
    {
        private Device device = null;
        private VertexBuffer vb = null;
        private IndexBuffer ib = null;

        private static int terWidth = 5;
        private static int terLength = 5;
        private float moveSpeed = 0.2f;

        private static int vertCount = terWidth * terLength; //amount of vertices
        private static int indCount = (terWidth - 1) * (terLength - 1) * 6; //amount of indices

        private Vector3 camPosition, camLookAt, camUp;

        CustomVertex.PositionColored[] verts = null; //our vertices here can only store position and color information

        private static int[] indices = null;

        public Form1()
        {
            this.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.Opaque, true); //this needs to be set so the invalidate() function in the paint event works properly
            InitializeComponent();

            InitializeGraphics();
            InitializeEventHandler();
        }
        private void InitializeGraphics()
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;
            pp.SwapEffect = SwapEffect.Discard; //just how the stuff should be moved from the backbuffer to the front buffer
            pp.EnableAutoDepthStencil = true;
            pp.AutoDepthStencilFormat = DepthFormat.D16;

            device = new Device(0, DeviceType.Hardware, this, CreateFlags.HardwareVertexProcessing, pp);

            GenerateVertex();
            GenerateIndex();

            vb = new VertexBuffer(typeof(CustomVertex.PositionColored), vertCount, device, Usage.Dynamic | Usage.WriteOnly, CustomVertex.PositionColored.Format, Pool.Default);
            OnVertexBufferCreate(vb, null);

            ib = new IndexBuffer(typeof(int), indCount, device, Usage.WriteOnly, Pool.Default);            
            OnIndexBufferCreate(ib, null);

            //Initial Camera position
            camPosition = new Vector3(2, 4.5f, -3.5f);
            camUp = new Vector3(0, 1, 0); // the cameras up is looking actually up on the Y axis e.g. (0,-1,0) would turn the camera upside down
        }
        private void InitializeEventHandler()
        {
            vb.Created += new EventHandler(OnVertexBufferCreate);
            ib.Created += new EventHandler(OnIndexBufferCreate);

            this.KeyDown += new KeyEventHandler(OnKeyDown);
            this.MouseWheel += new MouseEventHandler(OnMouseScroll);
        }

        private void OnIndexBufferCreate(object sender, EventArgs e)
        {
            IndexBuffer buffer = (IndexBuffer)sender;
            buffer.SetData(indices, 0, LockFlags.None); //puts all indices from the int array into the index buffer
        }
        private void OnVertexBufferCreate(object sender, EventArgs e)
        {
            VertexBuffer buffer = (VertexBuffer)sender;
            buffer.SetData(verts, 0, LockFlags.None); //puts all vertices from the vertex array into the vertex buffer
        }
        private void SetupCamera()
        {
            camLookAt.X = camPosition.X;    //
            camLookAt.Y = camPosition.Y-1;  // Bind the camera lookAt somehow with the camera position, so once we move around we also move the lookAt
            camLookAt.Z = camPosition.Z+1;  //

            device.Transform.Projection = Matrix.PerspectiveFovLH((float)Math.PI / 4, this.Width / this.Height, 1.0f, 100.0f);  //sets the perspective and the field of view of the camer
            device.Transform.View = Matrix.LookAtLH(camPosition, camLookAt, camUp); //sets the position, the lookat and the up vector of the camera

            device.RenderState.Lighting = false;
            device.RenderState.CullMode = Cull.CounterClockwise; //sets which site of the triangles should be shown
            device.RenderState.FillMode = FillMode.WireFrame; //this sets the mode so we can actually see the triangle construct of the terrain
        }
        private void Form1_Paint(object sender, PaintEventArgs e) //here we kindof have a drawing loop
        {
            device.Clear(ClearFlags.Target | ClearFlags.ZBuffer, Color.Black, 1, 0);

            SetupCamera();

            device.BeginScene();

            device.VertexFormat = CustomVertex.PositionColored.Format;

            device.SetStreamSource(0, vb, 0); //tells the device where to receive the vertex information from
            device.Indices = ib; //tells the device where to receive the index information from

            device.DrawIndexedPrimitives(PrimitiveType.TriangleList, 0, 0, vertCount, 0, indCount/3); //draws the triangles depending on the style we set it using the information from indices

            device.EndScene();
            device.Present();
            this.Invalidate();//this makes the form redraw itself over and over so that we have some kind of a loop 
        }
        private void GenerateVertex()
        {
            verts = new CustomVertex.PositionColored[vertCount];

            int k = 0;
            for(int z=0; z < terWidth; z++)
            {
                for(int x=0; x < terLength; x++)
                {
                    verts[k].Position= new Vector3(x,0,z);
                    verts[k].Color = Color.White.ToArgb();
                    k++;
                }
            }

        }
        private void GenerateIndex() // Generating all the indices vor the Index buffer (Her we tell how to connect the vertices to creat triangles)
        {
            indices = new int[indCount];

            int k = 0;
            int l = 0;
            for(int i = 0; i < indCount; i += 6)
            {
                indices[i] = k;                 //
                indices[i+1] = k+terLength;     // left triangle of the square
                indices[i+2] = k+terLength+1;   //

                indices[i+3] = k;                   //
                indices[i+4] = k + terLength + 1;   // right triangle of the square
                indices[i+5] = k+1;                 //
                k++;
                l++;
                if (l == terLength - 1) //once one line of rectangles is created and the end of the line is beeing reached skip one k
                {
                    l = 0;
                    k++;
                }
            }
        }
        private void OnKeyDown(object sender, KeyEventArgs e)
        {
            switch (e.KeyCode)
            {
                case (Keys.W):
                    {
                        camPosition.Z += moveSpeed;
                        break;
                    }
                case (Keys.D):
                    {
                        camPosition.X += moveSpeed;
                        break;
                    }
                case (Keys.S):
                    {
                        camPosition.Z -= moveSpeed;
                        break;
                    }
                case (Keys.A):
                    {
                        camPosition.X -= moveSpeed;
                        break;
                    }
            }
        }
        private void OnMouseScroll(object sender, MouseEventArgs e)
        {
            camPosition.Y -= e.Delta * 0.001f;
        }
    }
}
